#!/usr/bin/env python

import sys, os, re, glob, cStringIO


def setLinkInFile( fname, link, comment ):
#  print >> sys.stderr, "Processing", fname
  bname = os.path.basename(fname)
  bname = bname[3:-2] # remove itk prefix and .h suffix
  f = open( fname, "r" )
  out = cStringIO.StringIO()
  # load everything in memory
  fcontent = f.read()
  f.close()
  # now parse all the doxygen fields
  last = 0
  for m in re.finditer(r"^( *)/\*\* *(.*?)\*/", fcontent, re.DOTALL | re.MULTILINE):
    # write what is before the doxygen field to the output
    out.write(fcontent[last:m.start(0)])
    last = m.end(0)
    # we don't care about doxygen fields not about a class
    m2 = re.search(r"\class +([^ ]*)", m.group(2))
    if m2 and m2.group(1).strip() == bname:
      indent = m.group(1)
      # drop the space and the * to make the processing easier
      dcontent =  m.group(2)
      emptyFirstLine = dcontent.splitlines()[0].strip() == ""
      dcontent = re.compile(r"^ *\* ?", re.MULTILINE).sub("",dcontent).rstrip()
      dcontent2 = setLinkInDoxygenComment(dcontent, link, comment)
      dcontent2 = re.sub("\n\n+", "\n\n", dcontent2)
#       if emptyFirstLine:
#         dcontent2 = "\n"+dcontent2
      dcontent2 = "/** "+dcontent2.replace("\n", "\n"+indent+" * ")+"\n"+indent+" */"
      dcontent2 = re.compile(r" +$", re.MULTILINE).sub("", dcontent2)
      out.write(dcontent2)
    else:
      # not a class
      out.write(m.group(0))
  out.write(fcontent[last:])
  # we can save the content to the original file
  f = open( fname, "w" )
  f.write( out.getvalue() )
  f.close()

def setLinkInDoxygenComment(dcontent, link, comment):
  m = re.search(r"(^.*\\wiki(?:\n| ))(.+)(\\endwiki.*$)", dcontent, re.DOTALL)
  if m:
    # the wiki-endwiki is already there - good
    return m.group(1)+setLinkInWikiBlock(m.group(2), link, comment)+m.group(3)
  else:
    # get the \wikiexample which may be there, so we can put them in the new wiki block
    examples = "\n".join(re.findall(r"\\wikiexample{.+?,.+?}", dcontent))
    if examples != "":
      examples += "\n"
    cleanedDContent = re.sub(r" *\\wikiexample{.+?,.+?} *", "", dcontent)
    return cleanedDContent+"\n\n\\wiki\n"+setLinkInWikiBlock(examples, link, comment)+"\\endwiki"
    
def setLinkInWikiBlock(wikiBlock, link, comment):
  stag = r"\wikiexample{"+link+","
  tag = r"\wikiexample{%s,%s}" % (link, comment)
  if tag in wikiBlock:
    return wikiBlock
  elif stag in wikiBlock:
    # comment has changed
    return re.sub(r"\\wikiexample{"+re.escape(link)+",.+?}", tag, wikiBlock)
  else:
    return wikiBlock+tag+"\n"


def checkLink( fname, link, comment ):
#  print >> sys.stderr, "Checking", fname
  bname = os.path.basename(fname)
  bname = bname[3:-2] # remove itk prefix and .h suffix
  f = open( fname, "r" )
  # load everything in memory
  fcontent = f.read()
  f.close()
  # now parse all the doxygen fields
  ret = 0
  for m in re.finditer(r"/\*\*(.*?)\*/", fcontent, re.DOTALL):
    dcontent = m.group(1)
    # we don't care about doxygen fields not about a class
    if r"\class" in dcontent and dcontent != " \class classname ":
      m2 = re.search(r"(^.*\\wiki(?:\n| ))(.+)(\\endwiki.*$)", dcontent, re.DOTALL)
      if m2:
        wikiBlock = m2.group(2)
        # do we have a line with the expected content?
        tag = r"\wikiexample{%s,%s}" % (link, comment)
        if not tag in wikiBlock:
          # get class name and the line for debug output
          cname = re.search(r"\class +([^ ]*)", dcontent).group(1).strip()
          if cname == bname:
            line = len(fcontent[:m.start(1)].splitlines())
            print >> sys.stderr, r'%s:%s: error: "%s" not set in class %s.' % (fname, line, tag, cname)
            ret = 1
      else:
          # get class name and the line for debug output
          cname = re.search(r"\class +([^ ]*)", dcontent).group(1).strip()
          if cname == bname:
            line = len(fcontent[:m.start(1)].splitlines())
            print >> sys.stderr, r'%s:%s: error: no wiki block in class %s.' % (fname, line, cname)
            ret = 1
        
  return ret

def getLinksAndComments():
  res = {}
  import mwclient
  site = mwclient.Site('itk.org', '/Wiki/')
  page = site.Pages['ITK/Examples']
  content = page.edit()
  for l in content.splitlines():
    if re.search(r'{{ITKDoxygenURL\|([^}]+)}}', l):
      m = re.match(r"\| *\[\[.*ITK/Examples/(.+)\|(.+)\]\] *\|\|", l)
      link = m.group(1).strip()
      comment = m.group(2).strip()
      comment = comment.replace(",", r"\,")
      classes = re.findall(r'{{ITKDoxygenURL\|([^}]+)}}', l)
      if not 'Broken/' in link and not 'WishList/' in link:
        for c in classes:
          ps = res.get(c , [])
          ps.append((link, comment))
          res[c] = ps
  return res

def main():
  # first arg is the command
  command = sys.argv[1]

  if command == "set":
    link = sys.argv[2]
    comment = sys.argv[3]
    files = sys.argv[4:]
    for fname in files:
      setLinkInFile(fname, link, comment)
    return 0

  elif command == "check":
    link = sys.argv[2]
    comment = sys.argv[3]
    files = sys.argv[4:]
    ret = 0
    for fname in files:
      ret = max( ret, checkLink(fname, link, comment) )
    return ret

  elif command == "massive-check":
    lcs = getLinksAndComments()
    cmm = os.path.abspath(sys.argv[2]+"/*/*/*/itk-module.cmake")
    ret = 0
    for fname in glob.glob(cmm):
      dname = os.path.dirname(fname)
      for fname2 in glob.glob(dname+"/include/*.h"):
        bname2 = os.path.basename(fname2)
        bname2 = bname2[3:-2] # remove itk prefix and .h suffix
        if lcs.has_key(bname2):
          for link, comment in lcs[bname2]:
            ret = max( ret, checkLink(fname2, link, comment) )
    return ret

  elif command == "massive-set":
    lcs = getLinksAndComments()
    cmm = os.path.abspath(sys.argv[2]+"/*/*/*/itk-module.cmake")
    for fname in glob.glob(cmm):
      dname = os.path.dirname(fname)
      for fname2 in glob.glob(dname+"/include/*.h"):
        bname2 = os.path.basename(fname2)
        bname2 = bname2[3:-2] # remove itk prefix and .h suffix
        if lcs.has_key(bname2):
          for link, comment in lcs[bname2]:
            setLinkInFile(fname2, link, comment)

  else:
    print >> sys.stderr, "Unknown command", command
    return 1

if __name__ == "__main__":
  ret = main()
  sys.exit(ret)
